PHP (プログラミング言語)
PHP（ピー・エイチ・ピー）は "The PHP Group" によってコミュニティベースで開発されているオープンソースの汎用プログラミング言語およびその公式の処理系であり、特にサーバーサイドで動的なウェブページ作成するための機能を多く備えていることを特徴とする。
名称の PHP は再帰的頭字語として、 "" を意味するとされており、「PHPはHTMLのプリプロセッサである」とPHP自身を再帰的に説明している。
PHPはラスマス・ラードフが個人的にCで開発していたCGIプログラムである "" （短縮されて "" と呼ばれていた）を起源とする。
元々はラードフ自身のWebサイトで簡単な動的Webページを作成するために用いられていたが、その後データベースへのアクセス機能などを追加したPHP Toolsを1995年にGPLの下で公開した。
オープンソースライセンスの下で公開されたことにより同ツールの利用者が増加し、機能の追加を行う開発者たちの貢献もあって、幾度かの大きなバージョンアップを経て今日に至っている。
PHPの再帰的頭字語が PHP: Hypertext Preprocessor となったのは2017年現在の文法の基礎が確立したPHP 3からである。
先に述べたように、PHPは動的なWebページを生成するツールを起源としているため、公式の処理系にはWebアプリケーション開発に関する機能が豊富に組み込まれている。
元々PHPはプログラミング言語と言えるものではなく、単にテンプレート的な処理を行うだけであったが、度重なる機能追加やコードの書き直しにより、2017年現在リリースされているPHP 5やPHP 7は目的によらず汎用的に使うことの出来るスクリプト言語となっている。
特にApache HTTP ServerやnginxといったWebサーバーから動作させるスクリプト言語として選択されてサーバーサイドWebアプリケーション開発に利用されることが多い。
プログラミング言語としてのPHPは、CやPerl, Javaなどのプログラミング言語に強く影響を受けており、これらの言語に近く学習しやすい文法を有する。
組み込み関数についてもこれらの言語から直接輸入されたものも多く、関数名を変えずにそのまま取り込んだことで標準関数の命名規則が一貫していないといった問題も有している。
またC由来のヌル終端文字列とヌル文字を含むことを許容する文字列とが併存し、関数によってどちらを取り扱うかが異なっていたために深刻なセキュリティ上の問題を起こしたこともある。
PHPで書かれたライブラリは、PEARを利用してシステムワイドにインストールしたりユーザ単位で利用することが多かったが、2012年にRubyのパッケージ管理ツールであるRubyGems及び依存関係管理ツール、Node.jsのnpmに影響を受けて開発されたComposerが公開されたことにより、パッケージリポジトリPackagistに登録されたライブラリをプロジェクト単位で利用することが容易になった。
PHP製のWebアプリケーションフレームワークが増加したことにより、それらが提供するロガーやHTTPリクエストハンドラなどといった共通の機能を実装するコードの再利用性を高めるため、2010年頃にフレームワーク開発者などが集まってPHP Standard Groupを立ち上げた。
PHP Standard Groupはその後PHP-FIG (Framework Interoperability Group)に改称し、クラスオートローディングの規格やコーディング規約などの推奨される標準規格、PSR (PHP Standards Recommendations)の策定を行っている。
プログラミング言語としてのPHPはCやPerlなどの影響を強く受けており、同じくこれらに影響を受けたRubyやPythonと比較してよりCそのままに近い制御構文を有している。
またクラスやインターフェイスといったオブジェクト指向構文はC++よりJavaに近いものが採用されている。
文法の近さによって利用者の多いCやJavaからPHPを学んだり、その逆も行いやすいことは言語の学習コストの面からは大きな利点である。
PHPによるHello worldの最も簡単な実装は、単にテキストファイルとして「Hello world」を記述するだけでよい。
PHPはテキストファイルにHTMLタグのように埋め込んで書き、それ以外の部分はそのまま出力されるため、上記は（プログラムとして実行される部分は存在しないものの）正しく処理系によって認識されて「Hello world!」を出力する。
もう少しプログラムらしい書き方をすれば次のような記述が出来る。
PHPの処理系はPHPタグcodice_1で囲われた部分を解釈・実行し、その外側の部分はそのまま文字列として出力する。
単純にデータを出力する場合にはPHPタグをcodice_2と略記することが可能であり、更にPHPタグがファイルの末尾にある場合はファイル末尾の空白や改行の影響を避けるためにPHPタグを閉じないことが推奨されるので、次のように書いても同じ結果が得られる。
プログラミング言語としてのPHPを実行するための The PHP Group による公式な処理系の実装も、プログラミング言語としてのPHPと区別されることなく PHP と呼ばれる。
2014年頃までプログラミング言語としてのPHPには規格などが存在しなかったため、公式の処理系の実装およびマニュアルの記述がその代わりとなっていた。
2018年1月現在では、作業中となっているが、プログラミング言語としての仕様は処理系の実装と分かれて文書化されている。
この実装はCで書かれており、PHP LicenseおよびZend Engine Licenseの下で公開されている自由なソフトウェアである。
PHP4以降において、プログラミング言語としてのPHPを解釈・実行するエンジンとしてZend Engineが使用されており、PHP5よりZend Engine 2、PHP7ではZend Engine 3へと順次バージョンアップされている。
Zend EngineはPHP 3の主要な開発者であるアンディ・ガトマンズおよびゼーブ・スラスキー（後にZend Technologies Ltd.を設立）により設計・開発されたスクリプト言語エンジンであり、現在はThe PHP GroupによりPHPと共に開発されている。
Zend Engineは1つのプロセスが1つのインタプリタのコンテキストを持つように設計されていて、単独ではマルチスレッドを用いた処理をサポートしていない。
PHPはそのソースコードのほとんどがPHP Licenseの下でリリースされるが、Zend EngineのコードについてはZend Engine Licenseが適用される。
実際のPHPの構成はZend Engineに加え、PHPの組み込み関数の実装、Webサーバや標準入出力とスクリプティングエンジンの間を仲介するSAPI (Server API) レイヤ、マルチスレッドで動くWebサーバのモジュールとして利用される場合にグローバル変数のセマンティクスを提供するTSRM (Thread Safe Resource Manager)、プラットフォーム間での入出力機構やAPIの差異を吸収するStreamsレイヤを含む。
一部の組み込み関数はプラットフォームごとに挙動が違うため、スクリプトによっては移植作業が必要になる場合がある。
公式の処理系に対して、CやC++で記述された拡張ライブラリを提供する PECL (The PHP Extension Community Library) というプロジェクトが存在する。
基本的にPECLのライブラリは標準ではPHPに組み込まれてはいないものが多いが、PECLで開発されていたライブラリがPHPの本体に標準でバンドルされるようになったり(PDO)、逆に非推奨となった機能が本体より取り除かれ、PECLでメンテナンスが継続される(mcrypt)こともあり、拡張機能としてはPHPの準標準と言える立ち位置にある。
PHPは数多くのDBMSを標準でサポートしている。
提供されるAPIは、ベンダ固有モジュールというDBMS毎に提供される専用モジュールによるものと、ベンダ毎の差異を吸収して一貫したインターフェイスで様々なDBMSに接続出来るデータベース抽象化レイヤとがある。
特にデータベースをより高度に抽象化して扱うライブラリなどでは、様々なDBMSに対応するためにPHP5.1で標準になったデータベース抽象化レイヤ PDO をバックエンドとして選択するものが多い。
PHPをWebサーバで動作させる方法には、実行ファイル形式 (CGI / FastCGI)、モジュール形式（mod_php / ISAPI など）がある。
どの方法を利用するか（利用出来るか）はWebサーバにより異なる。
実行ファイル形式によるCGIはほぼ全てのWebサーバに対応しているが、Apacheで動作させる場合はmod_phpとFastCGI、IISで動作させる場合はFastCGIとISAPI、lighttpdやNginxで動作させる場合はFastCGIが利用可能である。
このほかにも、PHPに標準で実装されているWebサーバ用APIは多い。以下に一覧を挙げる。
とくに、HTTPリクエストの度にプロセスを起動させないインタフェース（Apacheとmod_phpの組み合わせ、またはlighttpdなどのFastCGIに対応したWebサーバ）での動作が高速である。
PHPの処理系は公式の実装を含めいくつかの異なる実装が存在する。
そのうち比較的よく知られているものについて簡単に記述する。
PHPは学習コストの低さ、記述の容易さから多くのアプリケーションが開発されている。
Wikipediaを動作させているアプリケーションであるMediaWikiもPHPによって記述されている。
本節ではPHPで書かれた代表的なアプリケーションを列挙する。
ラスマス・ラードフは自身のWebページで利用するため、1994年にCで書かれたCGI用バイナリ群を作成し、 "Personal Home Page Tools" と命名した。
このCGIソフトウェアは略して "PHP Tools" と呼ばれることが多かったようである。
その後、利用者からの機能要望が増えたため、オリジナルのPHP Toolsは大きく書き直され、データベースを利用することが出来るようになった。
単純なツール群から一種のフレームワークとしての機能を有するようになったのである。
ラードフは1995年6月8日にGPLの下でPHP Toolsを公開、オープンソースソフトウェアとして最初のリリースを行った。
1995年9月、ラードフはPHP Toolsを発展させ、現在のPHPにも受け継がれている特徴、Perl風の変数名やHTMLフォームデータの自動取得、そしてHTMLへの埋め込み型の記述方式などを持ったツール "FI" (Form Interpreter) を実装した。
翌月にはFIを完全に書き直し、 "Personal Home Page Construction Kit" という名前でリリースを行い、CやPerlに近い構文を有する簡易スクリプトツールへと発展した。
このツールは再び一から書き直され、ユーザ定義関数のサポートなど、プログラミング言語としての機能を有するようになった。
1996年4月になるとPHPとFIの名称を合わせた "PHP/FI" として公開された。
同年6月に、後にPHP 2として言及される "PHP/FI Version 2.0" のベータ版がリリースされた。
PHP/FI Version 2.0は翌1997年11月に正式版がリリースされ、その後1998年1月に一度アップデートが行われたあとはメンテナンスは行われなかった。
イスラエルのアンディ・ガトマンズとゼーブ・スラスキーは、e-コマースアプリケーションを開発するためにPHP/FI Version 2.0を利用しようと考えていたが、PHP/FIには機能が不足していた。
そこで1997年、彼らはラードフに対してPHP/FIを作り直す方法を検討していることを伝えた。
ガトマンズとスラスキ―はPHP/FIで使われていたパーサを書き直し、ラードフとも協力して新たなプログラミング言語を開発した。
この言語は再び "PHP" と命名されたが、"Personal Home Page Tools"が抱えていた個人用という印象を避けるため、新しく "PHP: Hypertext Preprocessor" という再帰的頭字語を与えられることになった。
1998年6月、ラードフ、ガトマンズそしてスラスキーに加え、世界中の開発者らが立ち上げたPHP Development Teamは "PHP 3.0" をPHP/FI Version 2.0の後継として、GPLとPHP Licenseとのデュアルライセンスの下でリリースした。
PHP 3.0がリリースされて間もなく、ガトマンズとスラスキーはPHPのプログラミング言語を処理するコアの部分の再設計を行い、新しく作り上げた実行エンジンを彼らの名前からとって "Zend Engine" と命名した。
2000年5月、このZend Engineを使用した大幅なパフォーマンスの改善を行い、より多くのWebサーバのサポートなどの機能拡張を行った新しいバージョンである"PHP 4.0"がリリースされた。
PHP 4ではコピーレフト条項がPHPの利用拡散を妨げるという判断により、ライセンスからGPLが外れてPHP LicenseおよびZend EngineのコードについてはZend Engine Licenseが適用されることになった。
PHP 4は4.0から4.4までがリリースされ、2008年8月にセキュリティ対応を含めた全ての開発が終了している。
2004年7月、新たにZend Engine 2をコアとし、オブジェクト指向構文をより一層強化したバージョンである "PHP 5.0" がリリースされた。
マイナーアップデートにより様々な機能の追加が行われ、DBMSへの一貫したアクセスインターフェイスを提供する抽象化レイヤPDOが導入されたり、PHPが欠いていた名前空間、静的遅延束縛、クロージャなどをはじめとしたプログラミング言語としての機能強化が頻繁に取り入れられている。
PHP 5.4では特筆すべき機能として開発用の組み込みWebサーバが導入されており、他のWebサーバを導入しなくともWebアプリケーション開発が容易に行えるようになった。
PHP 5.6では対話式デバッガがSAPIとして組み入れられた。
PHP 5は既にほとんどのバージョンで開発が終了しており、残るPHP 5.6のセキュリティ対応も2018年に終了する予定である。
PHP 5.3の次のリリースとなるべく開発されていたバージョンで、エンジンの内部処理がUTF-16に置き換えられる計画であったが、多くの問題に見舞われたことから2010年に開発が断念されている。
PHP 5.3の次のリリースはPHP 5.4へと置き換えられ、また次のPHPのメジャーリリースがPHP 7とされたことでPHP 6は欠番となった。
2015年12月に内部エンジンをZend Engine 3とした"PHP 7.0"がリリースされた。
Zend Engineの改善を行うPHPNG (PHP Next-Gen) プロジェクトの成果を取り入れており、データ構造の改善などにより、前バージョンのPHP 5.6と比べて25%から70%の性能改善が図られている。
また言語仕様も大きく拡張されており、引数のタイプヒンティングにスカラー型が指定できるようになる（タイプヒンティングは5.1で導入されたが、クラスや配列など一部の型に限られていた）他、戻り値へのタイプヒンティングも導入されており、前年に発表されたHHVM用プログラミング言語Hackの影響が見受けられるものになっている。
