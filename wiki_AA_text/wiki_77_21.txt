予約語
予約語（よやくご、）とは、プログラミング言語において字句的には識別子（変数名、関数名、クラス名など）としてのルールを満たしているにもかかわらず、識別子にならない字句要素。
似ている言葉としてキーワードがある。多くのプログラミング言語において予約語とキーワードはほぼ同じものを指すため、しばしば混同されるが両者は異なる概念である。キーワードは言語仕様上特別な意味を持った語のことである。キーワードであっても予約語でないこともあるし、その逆もある。たとえば では、codice_1 は予約されており予約語だが言語で使われておらずキーワードではない（-262 では、キーワードは予約語の部分集合で、言語で制御構造などの意味を持つ予約語がキーワードである。 では使っていなくてもキーワードであり、codice_2 もキーワードである）。SQLには予約されたキーワードと予約されていないキーワードがある。例にも出てきたように、個々の規格によっても両者それぞれ微妙に意味が違うこともある。
予約されているのでユーザーは使えない識別子（つまり、使えないだけで、識別子ではある）という意味で（たとえば、処理系で内部的に使う名前と同じであるとか）「予約語」という語を使っている規格もある。この場合キーワードと予約語は別のものである。
、 のように予約語を持たないプログラミング言語も存在する。
また、共通言語基盤（共通言語仕様 (CLS)）にしたがって実装されたC#やVB.NETでは予約語を識別子として利用する構文が用意されている。
抽象構文的には全く違いは無いにもかかわらず、具象構文・字句構文（lexical syntax）的な違いは見た目の違いとしてわかりやすいこともあり、しばしばプログラマの好みの問題になりやすい。代表的にはブロックが codice_16 か codice_17 か、などといった点であるが、そういった要素に記号を多用しがちな言語と、キーワードを多用しがちな言語がある。記号を使うのは簡潔だが、やりすぎると一見では暗号のようになりかねない（PerlやAPLなど）。キーワードを使う言語は冗長だが明示的という点は利点だが、識別子に使える名前が制限され、フォントを変えるなどシンタックスハイライトの支援がないと見た目にも区別しづらい（キーワードは全て大文字とし、識別子には必ず大文字アルファベット以外の文字が含まれるようにする、といった解決法もある）。近年はISO 646の国際版に、世界的に7ビットの文字コードは定着したが、以前は（あるいは今もEBCDICは絶滅していないので）記号は自由に使えない場合もあった。
コンテキストキーワード (contextual keywords) はC#やC++などの言語で採用されている特殊なキーワードで、文脈キーワード、文脈依存キーワードとも言われる（実際のところ、codice_2 を codice_19 とも書けたり、codice_20 相当を codice_21 という2語で1語扱いであったりと、文脈依存文法的なキーワードはそう特殊で珍しいものでもない）。
言語を後から拡張する場合、新しい構文や予約語を追加すると既存のコードが壊れてしまう場合がある。（例えば、変数やメソッド名が予約語と同じだった場合）
しかし、完全に将来の拡張を予期することは困難であり、予約語が拡張の障害になりうる。
そこで、新しく拡張された構文の中でのみ予約語（キーワード）として動作するのがコンテキストキーワードである。
コンテキストキーワードは特定の構文以外では変数などの名前として使用できるため、既存のコードを破壊することがない。
例えば、C#のプロパティ構文ではget、set、valueという多くの名前に使われているであろう語をコンテキストキーワードとして追加している。
