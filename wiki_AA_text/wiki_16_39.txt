OCaml
OCaml（ 、オーキャムル、オーキャメル）は、フランスの が開発したプログラミング言語MLの方言とその実装である。MLの各要素に加え、オブジェクト指向的要素の追加が特長である。かつては という名前で、その略として と広く呼ばれていたが、正式に に改名された。
もとはCamlという名前の、MLの方言の処理系実装、および言語であった。この名前はcategorical abstract machine languageの頭字語である。クラスや継承などクラスベースオブジェクト指向の言語機能が追加され Objective Camlという名前になり、その後、略称だったOCamlを正式な名前とした。ウェブサイトの概要説明では「OCamlはCaml派生の言語の中で最も知られたものである」としている。もとの処理系も配布され続けており、Caml Lightという名前になっている。英語ではCamlはcamel（ラクダ）と同様に発音されており、アイコン等にもラクダを使っている。
MLの特徴の他に、関数型とオブジェクト指向の両方を併せもつことが特徴的である。ただしそのため、オブジェクト指向を利用した破壊的操作を伴うプログラムがかなり容易に書けてしまう。また、多相バリアント型という特殊なバリアント型により（通常のバリアント型については代数的データ型を参照のこと）、サブセットとスーパーセットの関係になっているバリアント型などを記述できるなどといった特徴もある。
処理系としての特徴は、関数型言語としてはかなり高速に動作することが挙げられ、gccでコンパイルされたC言語と互角かやや遅い程度と言われる。
関数型言語としては比較的アプリケーションの数が多く、例えばMediaWikiにおいてTeXの記述からHTML、MathMLおよび画像の数式を生成するプログラムもOCamlで記述されている。
MinCamlは、ペンシルベニア大学（当時）の住井英二郎がOCamlで実装した、Caml似のMLの小型版である。同作者により、コンパイラが OCaml 自身で書かれている。MinCaml は、2004年度の未踏ソフトウェア創造事業に採択された。
MinCaml コンパイラは教育目的での利用を主眼としている。わずか2000行前後のコードで書かれており、実装されている機能はMLのサブセットである。バックエンドはSPARCとx86に対応しており、ある程度の学習をすれば比較的容易に改造を行うことができる（実際、有志によってPowerPC用に出力できるバージョンも提供されている。バックエンドをLLVMに置き換えた例も報告されている。）。実際に東京大学理学部情報科学科などで教育目的に利用され、国内における OCaml および関数型言語の普及と理解に一定の役割を果たしている。
CamlやOCamlのような方言ではなく、SML（Standard ML）の処理系の実装にCaml Light利用している。完全なSMLを実装する。
 など、研究用の改造のベースとして、規模の大きくなった ではなく（）を利用する例がみられる。
以下の例は、プログラム自体としてはMLと比べ特別なものでもないし、オブジェクト指向を活用したものでもないが、を含む では旧来のMLや からの記法や演算子や名前の変更が多く、簡単なプログラムでもそのままではエラーになるものが多いので、ここでは のコードを示す。
特徴として、型推論の活用により、多くの場合に型の宣言が必要なく、一部の静的型付き言語にありがちな煩雑さがないことが挙げられる。
以下のようにしてバイトコードにコンパイルされる。
以下が実行結果である。
クイックソートのコード例を示す。MLは多くの関数型言語と同様、再帰処理に秀でる。また、 などにも見られるパターンマッチの機能がここでも使われている。
以下は、ラムダ計算の教科書などに見られる、自然数のチャーチ符号化のコード例である。
チャーチ数nは、高階関数として表され、関数fと値xを受け取りxにn回fを適用する関数として定義されている。チャーチ数nを自然数nに変換するには、チャーチ数（実体は関数）に、インクリメントする関数と初期値0を渡せばよい。MLは関数型言語であるため、数学的なプログラミングの理論そのままに、記述することができる。
