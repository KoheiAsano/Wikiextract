WYSIWYG
WYSIWYG（アクロニム: ウィジウィグ）とは、コンピュータのユーザインタフェースに関する用語で、ディスプレイに現れるものと処理内容（特に印刷結果）が一致するように表現する技術。What You See Is What You Get（見たままが得られる）の頭文字をとったものであり、「is」を外したWYSWYG（ウィズウィグ）と呼ばれることもある。
近年では、コンテンツ管理システムでも使われるようになり、この場合は、入力画面と出力画面が一致するよう表現する技術を指す。
元来の意味は、文書作成プログラムを使った時にコンピュータのディスプレイで見たままに、同じサイズで印刷結果が得られる事を指して言った言葉であった。文字の大きさや装飾などが印刷前に画面上でも確認でき、画像やグラフなどの文字以外の要素がある場合にはその配置状態も画面で確認できる。また、禁則処理や字詰めなどが画面と印刷で全く一致するということも含まれる。
だが現実には多くの場合において、印刷結果が画面で見ていたものと完全に一致する事は無い。これは、多くの場合画面と印刷物では解像度や縦横比が異なることや、画面で見る場合にはスクロールバーなどのインタラクティブな要素が入ってくることが多いことに起因する。また、ソフトウェアによっては、これらの要因などにより画面描画時と印刷時に全く同じアルゴリズムのプログラムを用いることができず、結果が異なることも多くある。さらに、色が関係する場合にはデバイスの特性の違いのために、全く同じ結果を得ることが不可能であるということもある。
アップルのMacintoshは、当初完全なWYSIWYGを目指して設計され、画面表示と印刷出力の両方でQuickDrawを開発し利用した。そのとき文字のサイズの単位であるポイントがほぼ1/72インチであることに着目して、画面解像度が72dpiに近いディスプレイを標準で採用。「1ポイント＝1ドット＝1ピクセル」という原則が打ち立てられた。プリンターも72の整数倍である144dpi、216dpiの解像度の物が用意されていた。また表示用の2倍、3倍の解像度の印刷フォントも搭載されていたために、画面に表示されたのとまったく同じ印刷出力を得る事が可能であった。グラフィックは印刷においても画面と同じ72dpiそのままでジャギーが目立ったが、当時はさほど支障とはならなかった。QuickDrawをストレートに実装したアプリケーションにMacPaintと MacDrawがあり、MacintoshのユーザはそれらによってWYSIWYGを体感できたのである。
その後Macintoshでもモニタ解像度が任意となり、画面サイズと印刷出力のサイズが必ずしも一致しなくなった。
現在ではこの言葉はレイアウトやカラーマネジメントにおいて、編集中もしくはプレビュー時に画面に表示されるものとほとんど同じものが、最終結果（印刷結果に限らず、HTMLによる文書等も含む）として得られるようなアプリケーションや、その編集方法を指す場合も多い。また、画面上で文字などのオブジェクトを選択し、レイアウトや色彩などその属性を変更すると、即座に画面に変更結果が表示されるというユーザインタフェースのことをさす場合もある。つまりユーザのイメージがすぐ実現するということを重視するのである。さらには、コンピュータディスプレイ上で図形などを用いて表現される事物に対する操作が、実際の動作とできるだけ一致するように工夫されたユーザインタフェースのことをさす言葉としても用いられることさえある。具体的には、「ファイルはフォルダの中に入っているものなので、画面上でフォルダを開く操作をすると中のファイルを取り出すことができる」とか「ファイルを印刷機に入れる操作（ファイルアイコンを印刷機アイコンに重ね合わせる）によって印刷を実行できる」などという操作環境のことである。これらは一般にはデスクトップ・メタファと言われるものであるが、こういった概念も元来は無関係のWYSIWYGに含めて混同して考えるということもしばしば行なわれる。
なお、NEXTSTEPは画面出力にDisplay PostScript、印刷出力にPostScriptを採用し、画面・プリント出力とも同じ結果を得ることができた。NEXTSTEP/OPENSTEPとClassic Mac OSの後継であるmacOSでは、PDFベースのQuartzにより、解像度に依存しないWYSIWYGを実現している。
この言葉をこの意味で最初に使ったのは、ゼロックスのパロアルト研究所 (PARC) で文書作成プログラム"Bravo"を作成したチャールズ・シモニー ("Charles Simonyi")である。Bravoは最初からWYSIWYGなプログラムであったが、当初はこの用語は存在しなかった。あるときシモニーがBravoのデモンストレーションとして、ゼロックスのロゴタイプが含まれた文書をシティバンクの人に印刷してみせた。このとき、透明な用紙に印刷をして画面と印刷がほとんど変わらないということを重ね合わせて見せた所、それを見た人がその当時テレビで流行っていたフリップ・ウィルソンの口癖 "What you see is what you get."を口にした。以降、シモニーをはじめとするPARCの人たちが好んでこの言葉を使うようになり、さらには計算機科学者らに広まっていった。ディスプレイ表示と印刷結果がイコールというWYSIWYGの基本アイデアが、複写機メーカーであるゼロックス社の研究所で誕生したのは決して偶然ではなく、ドキュメンテーション技術におけるリーディングカンパニーとして、むしろ必然であったと言える。PARCの研究成果がその後DTPというひとつの文化の萌芽となったことは間違いない。
利便性を求めて開発されたWYSIWYGであるが、一方で次のような非難も根強く存在する。
近年、コンテンツに対するアクセシビリティが提唱されるようになってきており、特にウェブコンテンツに対するガイドラインとして、World Wide Web Consortium (W3C) が提唱するWeb Content Accessibility Guidelines (WCAG) というガイドラインが提唱されるようになった。
つまり、「多くの人」が「多くの環境」で情報を取得できるように、コンテンツである「文章そのもの」と、文字の大きさや色などの「装飾要素」を分けるべきという考えである。
これにより、ひとつの文章を、印刷物や、ウェブサイト、ソフトウェア、テレビ番組、ラジオ番組などの多くのメディアにおいて、それぞれの装飾方法で情報公開することができるようになる。
この概念は、「ワンソース・マルチユース」とも呼ばれ、現在におけるXMLによるコンテンツ管理技術へと発展している。
現在では、ウェブページにおけるXHTML言語や、地上デジタル放送などにおけるBML言語などにも広く応用されるようになった。
しかし、WYSIWYGなワープロソフト等では、文章の論理的な内容（章立て・見出しなどアウトライン）と外見のデザイン（文字の大きさ・色）が、必ずしも明確に分離されていない点が指摘される。具体的にはユーザーが好き勝手に強調したい文字を大きく見せたりすることが簡単にでき、デザイン的な自由度は高いが、論理性は二の次となる。
このため、双方に意識が散漫となり、内容も支離滅裂で外見の統一感も無い、中途半端な文書ができてしまいやすい。
また、一定のデザインを多くの文書に適用したり、一つの文書に対し適用するデザインを切り替えて多様な出力を得ること（ワンソース・マルチユース）も難しくなる。
多くのワープロソフト等では、アウトラインプロセッサなど文書の論理構成とデザインを分離する機能を備えているが、正しく使いこなすには多くのスキルを必要とする。また内容と外見の分離の必要性を感じない人も多く、広く利用されているとは言い難い。正しく作成された文書も、熟練していない者が加筆すると章立てや見出しの設定が破壊され台無しになることもある。多くのユーザーは論理的に見出しのレベルを選択すべきケースで、単純に文字の大きさを選択してしまう。
特に数学や情報工学の分野において、上のような非難をする人が多く見られる。このため、TeXやDocBookを愛用する者や、HTMLやCSSを直接編集してWebページを作成する者も多い。コンピュータの専門家であるのに、Microsoft Wordの操作方法を全く知らず、一般人に驚かれるという話も聞かれる。このように1枚の文書をマルチユースを前提とした論文のようにとらえるか、読み捨てのチラシのようにとらえるかの差は大きい。
ひとつのスタイルとして、内容と外見を分離するため、文章編集は専らテキストエディタで行い、印刷時にのみワープロソフトで整形する者もいる。よく似た慣行として印刷や出版業界では、最初から執筆者に整形しないテキストのみの提出を求めるケースが多い。一方でインデザインなどDTPソフトを指定して、熟練した執筆者にページ丸ごと編集をまかせるケースもある。
なお、Wikipediaの編集画面もWYSIWYGではないため、見出し以外の文字を故意に大きく見せるようなことはできない。そのため内容と外見が分離され不特定多数が編集してもデザインの統一性が保たれている。これは非WYSIWYG環境の有効性を証明する好例と言えよう。
WYSIWYGなソフトウェアは、逐次画面に最終的な出力結果を更新表示する必要があり、CPUやメモリに多くの負荷をかける。
しかし近年のコンピュータの高性能化により、これを理由にWYSIWYGを敬遠する人は、かなり減少した。
近年の多機能化したソフトウェアでは、WYSIWYGの前提である視覚的なメニューやボタンが膨大な数となり、必要な機能が探し出せないという問題が顕著になった。
このため、対話式のヘルプや、使用頻度の低いメニューを自動的に隠す機能が提案されたが、かならずしも広く支持を得ているとはいえない。Microsoft Office 2007では、複雑なメニューを一掃し、ソフトウェアが機能を提示するアプローチ (What You Get Is What You See: 仕上がりは御覧の通り、などと呼ばれる)を採用したが、現状では評価は定まっていない。
WYSIWYGは様々にもじられて使われることがある。
