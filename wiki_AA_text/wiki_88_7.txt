代数的構造
数学において代数的構造（だいすうてきこうぞう、algebraic structure）とは、集合に定まっている算法（演算ともいう）や作用によって決まる構造のことである。代数的構造の概念は、数学全体を少数の概念のみを用いて見通しよく記述するためにブルバキによって導入された。
また、代数的構造を持つ集合は代数系（だいすうけい、algebraic system）であるといわれる。すなわち、代数系というのは、集合 "A" とそこでの算法（演算の規則）の族 "R" の組 ("A", "R") のことを指す。逆に、具体的なさまざまな代数系から、それらが共通してもつ原理的な性質を抽出して抽象化・公理化したものが、代数的構造と呼ばれるのである。
なお、分野（あるいは人）によっては代数系そのもの、あるいは代数系のもつ算法族のことを代数的構造とよぶこともあるようである。 後者は、代数系の代数構造とも呼ばれる。
現代では、代数学とは代数系を研究する学問のことであると捉えられている。
一般的な代数的構造は普遍代数という数学の分野で研究される。代数的構造はまた、ほかの構造に加えて定義されることもある。位相構造をもつ位相群、位相線型空間、リー群はそのような例である。
どの構造も、それぞれに固有の準同型を持っている。このことを使って、それぞれの構造を満たすもの全体の圏を考えることができる。
代数系 ("A", "R") と ("B", "S") とは、それぞれの代数構造（算法族） "R" と "S" とが項数を込めて等しいか同一視できるとき、同類であるという（項数については算法の項参照）。
例えば群は、積だけを算法とする代数系とみなせば半群と同類であるが、各元にその逆元を対応させる写像も群の（単項の）算法に含めて考えると、半群とは同類ではない。
そして群をそのように半群と同類でない代数系として定義する方が、代数系の論としては正当で、理論上も便利なことがある（群論参照）。
また、環を加法と乗法を算法とする代数系とみなし、束を結びと交わりを算法とする代数系とみなせば、加法 "x" + "y" と結び "x" ∨ "y" 、乗法 "x" × "y" と交わり "x" ∧ "y" とを同一視することによって、この両者は同類の代数系となる。
しかし、環における加法・乗法と束における結び・交わりとは、異なる法則に従う。
例えば、環での加法・乗法は分配律 "x" × ("y" + "z") = ("x" × "y") + ("x" × "z") に従うが、束での結び・交わりは必ずしも分配律 "x" ∧ ("y" ∨ "z") = ("x" ∧ "y") ∨ ("x" ∧ "z") には従わない。
また、束での交わり・結びは冪等律 "x" ∧ "x" = x, "x" ∨ "x" = "x" に従うが、環での加法・乗法は冪等律 "x" × "x" = x, "x" + "x" = "x" に必ずしも従わない。
そこで、同類の代数系をさらに「それらの算法がどういう法則に従うか」によって分類して種に分けて、それぞれの種に属す代数系をまとめて抽象化して論ずるのが普通である。
歴史的には、半群・群・環・多元環・体・束などはそうやって出来た抽象概念である。
代数系についての基本概念には、代数系の部分代数系（部分系）と、同種の代数系の間の準同型写像（準写）とがある。
代数学の一分科である線型代数学に例をとれば、線型空間が研究対象とする代数系に当たり、線型部分空間が部分系に当たり、線型写像が代数系間の準写に当たる。
代数系についての副次的概念には、生成系・直積（直和）・商・拡大・普遍性・表現等々がある。
実数すべてから成る集合とそこでの四則（加減乗除の算法、すなわち足し算・引き算・掛け算・割り算）との組は、典型的な代数系である。
この例では、足し算・引き算・掛け算は任意の二つの数の組について実行可能であるが、割り算は、0での割り算ができないという意味で"局所的"（あるいは"非全域的"）である。
代数系の算法には一般には、こういうような局所的（あるいは非全域的）算法も含まれる。
たとえば行列の足し算・掛け算も、あらゆるサイズの行列から成る集合での算法とみなせば、局所的である。
こういう局所的算法を含む代数系の理論は複雑であるので、数学の分野では避けられる傾向がある。たとえば行列の足し算・掛け算も、数学者の間でさえ、上記のような意味での局所的算法と捉えて説明されることは稀である。また、上記の実数と四則とから成る代数系は体の典型であるが、体の概念も環の概念も、局所的算法である除法を用いないで説明するのが通例である。
一方で、数理論理学では、研究対象として形式言語を代数系の一種と捉えるが、形式言語における算法は局所的のものが一般的である。たとえば、述語論理学における形式言語である述語言語（論理式と項とから成る）では、論理記号 ∧, ∨, ￢, ⇒, ∀"x", ∃"x" は論理式に対してのみ実行可能な局所算法を表し、関数記号や述語記号は、項のみに対して実行可能な局所算法を表すと解される。
また、推論規則も局所的算法と解される。たとえば三段論法は、二つの論理式 "A" と "A" ⇒ "B" とから第三の論理式 "B" を導き出す推論規則であるが、これは、第二の論理式が "A" ⇒ "B" という特別な形のときだけ実行可能な局所算法と解される。
