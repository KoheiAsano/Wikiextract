Scheme
Scheme（スキーム）はコンピュータ・プログラミング言語 Lispの方言のひとつで、静的スコープなどが特徴である。仕様（2017年現在、改7版まで存在する）を指すこともあれば、実装を指すこともある。Schemeにより、Lisp方言に静的スコープが広められた。
Schemeは、MIT AIラボにて、ジェラルド・ジェイ・サスマンとガイ・スティール・ジュニアによって1975年頃に基本的な設計がなされた。動機は、カール・ヒューイットの提案によるエレガントな並行計算モデル「アクター」と、同じくその言語のPLASMA（Planner-73）を理解するためであった。
静的スコープ（ALGOL由来とされる）は、状態を持つデータであるアクタ（クロージャ）の実現以外にも、codice_1 構文を用いたλ計算や末尾再帰の最適化に不可欠な機構であった。
また、プログラムの制御理論から当時出てきた継続及びアクタ理論におけるアクタへのメッセージ渡しの概念から触発された継続渡し形式と呼ばれるプログラミング手法は以後の継続の研究に大きな影響を与えた。
MIT人工知能研究所においては以下のとおりLISPに始まるいくつかの言語が作られた。
この中でカール・ヒューイットが設計した規則ベースの言語 はあまりに複雑な機構を持っていたため実装されなかった。サスマン等はそれを使いやすい言語 、 として実現した。
同じくカール・ヒューイットが設計したアクタ言語 (-73) も複雑な機構を持っていたため、 による実装が存在したものの、その動作の仕組みを理解するのは困難であった。サスマン及びガイ・スティール・ジュニアは を理解するために、不要な機能を省いた 構文を持つ小さな を設計した。
上記の からその小さな の設計に至る過程は から 及び へ至る過程を彷彿とさせるものであったため、その言語は （計画する者）及び （策略を巡らす者）の次という意味で当初 （陰謀を企てる者）と名付けられた。しかし、当時のオペレーティングシステムのファイルシステムの制限からファイル名が6文字に切られたことから という名前が使われるようになった。
マッカーシーが後に回顧で、初期のLisp（LISP 1 および LISP 1.5）に関して「In modern terminology, lexical scoping was wanted, and dynamic scoping was obtained.」と書いているように、計算理論的にも静的スコープが本来は「正当」であり、動的スコープは、言ってしまえばある種の安易なインタプリタの実装手法が招く「バグ」である（有用なことも多いが）。
ガイ・スティールは、LISP 1.5 からの変更点として最初に静的スコープの採用と実装を挙げており、サスマンがAlgolに関して持っていた興味からによるもので、Algolの直接の影響だと述べている。
「FUNARG問題」（）として1970年前後から始まった議論において既に認識されていたもので、必ずしもSchemeから始まったとは言えないが、Scheme以後のLisp方言に静的スコープが広まったのはSchemeからの影響と言ってよく、殊にCommon Lispは特筆される。
 はcodice_2（略称：codice_4）と呼ばれるピーター・ランディンやジョン・レイノルズに始まる脱出オペレータの命令を提供する。
 の言語仕様はIEEEによって公式に定められ、その仕様は「」と呼ばれている。2016年現在広く実装されているものは改訂第五版に当たるR5RS（1998年）である。
なお、2007年9月に「」が成立した。4部構成となり、R5RSに比べおよそ3倍の文章量となった。R5RSまでは小さな言語仕様に対してのこだわりが見られたが、 サポート等の実用的な言語として必要な要素が盛り込まれている点が特徴的である。しかし、多くの機能が盛り込まれたにもかかわらず細部の練りこみが不十分であるといった批判もあり、非公式にR5RSを拡張する形でERR5RS () という規格を検討する党派も現れている。
2009年8月、 言語運営委員会は、 を大規模バージョンと、大規模バージョンのサブセットとなる小さな言語仕様のふたつの言語に分割することを推奨する意向を発表した。
2013年7月、「」 () が成立した。
 の仕様書はR5RSだと50ページにも満たないため、かなりの数の実装が存在する。
 は言語機能を必要十分の最低限まで単純化することを目指した言語である。そのため仕様書が簡素な反面、実用に際して各種のライブラリが乱立し、移植性が問題になっていた。そこで実装間の統一をとるため、コミュニティ内の議論を集約しているのが「」である。 ではライブラリ仕様、言語拡張仕様などがインデックス化されており、 準拠の実装系は「◯◯に準拠」といった形で利用者の便宜を図ることができる。
なお、 では言語機能とライブラリ機能は分けて考えられているため、 と 言語仕様のコミュニティは原則分離している。
 はしばしば他のアプリケーションの拡張用言語として使われる。代表的なアプリケーションには以下のようなものがある。
より専門的な応用としては、映画ファイナルファンタジーのために3Dレンダリングエンジンに インタプリタを組み込んだ例や、リトルウイングのピンボールコンストラクションシステムの記述に を使った例がある。
 が発表された一連の論文は、ラムダ論文と呼ばれている。
