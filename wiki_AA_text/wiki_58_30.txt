数
数（かず、すう、）とは、
ITなど特定の分野においては「数値（すうち）」ともいう。
数とは、順序や量を表すための語（概念）、および その記号（文字）である。
数と数字はしばしば混同され、また混同しても問題がない場合もあるが、本質的には異なる概念であり、数とは物の順序・量などを表現しているのに対して、数字のほうは、その数を表すための記号（文字）である。
数の概念は人類の歴史とともに次第に拡張されてきた。もっとも素朴な存在としての数は、ものの順番や個数としての自然数である。
ここにゼロ（零）、およびひとつひとつの自然数と一対になっている負の数（負の整数）を加えることで、整数が考えだされた。（この段階ではこれで「全ての数」とも考えられたので「integer」と呼ばれた。もともとintegerとは「全体」や「欠けの無い」という意味）
さらに整数の商を考えて有理数と拡張され、四則演算が自由に行える体系を得る。有理数から実数への拡張はこのような演算とは異なるギャップを埋めることで得られ、代数方程式の解法を通じて虚数を含む複素数へと拡張された。
フランスの数学者、アンリ・ポアンカレは「数」の定義は難しく、0、1などを厳密に定義するのは難しいと説明している。
これらを更に別の観点から拡張した体系が存在する。例えば、ものの個数の概念である自然数を拡張して基数が、ものの順番を表す意味での自然数の拡張として順序数が定義される。複素数を更に拡張したものとして、四元数、八元数・十六元数などの体系がある。あるいは、実数に加えて無限小や無限大を含む超実数などの体系もある。
数を如何にして数字に表すかという方法は記数法と呼ばれる。同じ数が、さまざまな記数法によって異なる表示をもつことは珍しいことではない。それどころか、ある種の記数法ではその方法だけで表示が一つに定まらないことがある。例えば、十進小数表示では 1 = 0.999... （右辺は、小数点以下の全ての桁が 9）という二通りの表示をもつ。
デジタルコンピュータでは、全てのデータは内部的には、1/0 という数値の集まり（あるいはスイッチのON/OFFという状態、さらに厳密に言えば High/Lowという2種類の電圧）という形で存在している。ひとつのスイッチのOFF/ONという状態が、数値の0/1と対応しており（同一視する方法で設計されており）、0/1があるので2進数が表現可能となっているのである。ひとつのスイッチ、0/1ひとつ、2進数の1ケタ相当を「1ビット」と言う。ひとつのスイッチがひと桁の2進数に対応するので、スイッチの個数を増やして組み合わせてゆくことで（同タイプのスイッチを並べておいてひとまとまりとして扱うことで）、桁数の多い2進数も表現できる。2進数8ケタを、しばしばひとかたまりとしてとらえて「1バイト」と言う。1バイト（＝8ビット）で、2＝256種類の値が表現できる。これの扱い方はいくつかあり、ひとつはこれを0〜255として扱う方法がある。あるいはこれを「-128〜0〜127」という整数などと見なして扱うこと（回路を設計すること）もできる。1バイトではわずかこの程度の範囲の整数しか表現できないが、桁数を増やす（ビット数、バイト数を増やす）ことで、もっと大きな整数を表現できることになる。たとえば2バイトならば、-32768〜+32767が表現できる。コンピュータの歴史では、CPUが一度に扱える桁数が 1バイト→2バイト→4バイト→8バイトと増すにつれ、大きな桁数の整数を表現し扱うことができるようになってきたのである。
（整数以上の数の表現方法まで説明してゆくとあまりに長文になるので省略するが）ともかくこのようにして、さまざまな工夫をすることで、コンピュータの内部では、自然数、負の数、整数、実数などをHigh/Lowという電圧（あるいは1/0）の集まりで表現し、多数のスイッチの電位を超高速で連鎖的に変化させることで、数の演算を実現しているのである。
（なお、PCの回路では、文字も「文字コード」という数値で（さらに言えば、想定されている数値と対応する、スイッチ群のOn/Offという状態の形で)存在している。例えば文字Aは標準的なASCIIコードやShift_JIS・UTF-8などでは0x41（10進数表記:65、小文字のaは0x61=97）である。同じように数字も文字として存在しており、文字 0 は数値にすると0x30=48である。
