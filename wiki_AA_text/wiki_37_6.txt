AppleScript
AppleScript（アップルスクリプト）は、アップルが開発したClassic Mac OS/macOS用のオブジェクト指向のスクリプト言語。System 7（Mac OS 7にあたる）から採用されている。
標準環境で利用でき、ある程度自然言語（英語）に似た構文を持つ。制御構文、ハンドラや変数、オブジェクトやプロパティの記述といったプログラミングの基本機能を言語に備えており、Mac OSのプロセス間通信機能の一つであるApple eventによって、システムや様々な対応アプリケーションにまたがって制御できる。
AppleScriptはMac OSのスクリプティング機構Open Scripting Architecture (OSA) に対応した言語（OSA言語）のひとつであり、OS X v10.10よりJavaScript for Automation (JXA) も標準搭載されるようになった。
アプリケーション操作の自動化、シェル、コマンドの呼び出し、画面上の部品の強制操作にWebコンテンツの強制コントロール、Cocoaフレームワークの呼び出しにiCloud経由のコンテンツ更新など、マクロ言語としてはカバーできる範囲がとても広い。そのうえ、GUIベースのアプリケーション開発まで行えるため、いったん覚えるとMacを用いた作業の生産性が向上する。ただし、他のアプリケーションを他のコンピュータからも操作できるため、セキュリティを考慮しさまざまな抑止機能がOSに用意されつつある(詳細は#制限機能を参照)。
Classic Mac OSからmacOSを通じて継承された唯一のテクノロジーであり、海外を中心に古くから開発者コミュニティが形成され、GUIベースのアプリケーションのコントロールについての知見が蓄積されている。
AppleScriptはOSAに準拠したスクリプト言語の一つであり、アプリケーション等のプロセスにApple eventを送ることにより自動操作を実現する。通常はコンパイル済みのバイトコードが保存され実行される。このため、基本的にはOSのバージョンやCPUの形式 (68000, PowerPC, x86, x64)、記述した言語（AppleScript英語、AppleScriptフランス語、AppleScript日本語）などに依存しないコードが生成される。
AppleScriptの言語そのものが定義している予約語（複数の単語による連語から構成される）は数十程度と少なく、標準では絶対値を求める機能や三角関数の機能すら持たないが、Scripting Additions/OSAX（Open Scripting Architecture eXtension）と呼ばれる機能拡張書類、あるいはAppleScriptそのもので記述したAppleScript Librariesによって命令を増やすことが可能となっている。
AppleScriptはMac OS上のアプリケーション間通信を基礎技術として用いているため、アプリケーションがApple eventに対応していればそのアプリケーションに処理を委ね、その処理結果を別のアプリケーションに対して用いることも可能である。また、現在のバージョンではUser Interface ScriptingあるいはGUI ScriptingあるいはUI Element Scriptingと呼ばれる機能を用いて、スクリプトからアプリケーションにメニュー操作やキー入力を伝達することも可能になっている。アプリケーションは、システム経由で送られてきたApple eventメッセージを解釈して対応した処理を行い、処理結果を再びシステムを経由してApple eventメッセージとして返す。
バイトコードインタプリタ型の逐次実行で処理されるため、ネイティブコードに比べると実行速度は劣るものの、アプリケーションの機能呼び出しを行わない場合にはスクリプト言語としては十分な速度で実行される。ただし、アプリケーションの機能呼び出しはコストも高く、前述のGUI Scriptingを用いたメニューなどの強制操作を行うと、さらに処理コストが増加し、時間がかかる。
AppleScriptは、簡素なダイアログ (display dialog)、ノーティフィケーションセンターへのノーティファイ (display notification)、ポップアップメニューからの項目選択ダイアログ (choose from list)、ファイル選択 (choose file)、フォルダ選択 (choose folder)、新規ファイル保存先パス選択 (choose file name) 、プログレスバー表示（Mac OS X v10.10以降。アプレット動作時のみ）などの、目的に特化した簡単なユーザインタフェースを提供している。
これら以外のユーザインタフェースを利用するために、現在利用できる手段で一番簡単なやり方は、FileMakerで画面を作成し、ボタンに対してスクリプトステップ「AppleScriptを実行」を割り当てておくというものである。
Adobe InDesignなどの一部のアプリケーションでは、簡易的なユーザーインタフェースをAppleScriptのプログラムから動的に生成する機能を備えている。
本格的な、自由度の高い自作のインタフェースを持たせるには、Xcode上で「AppleScript App」プロジェクトを作成し、その中にAppleScriptコード（AppleScriptObjC）を記述する。Xcode上で一般のアプリケーション開発と同様にユーザインタフェースを作成できる。コントロール（GUIの部品）が操作されると、AppleScriptコード中の対応するイベントハンドラが呼び出される。
macOSにはスクリプトの編集・実行ツールであるスクリプトエディタ（Mac OS X v10.0〜v10.4はスクリプトエディタ、Mac OS X v10.5〜v10.9はAppleScriptエディタ、Mac OSでは『スクリプト編集プログラム』）が付属する。
スクリプトエディタにAppleScript対応アプリケーションのアイコンをドラッグ・アンド・ドロップするとAppleScript用語辞書が表示され、これを参照しつつアプリケーションのコントロールを行う処理を記述する。
スクリプトエディタにはブレークポイント設定や変数内容のモニタリングなどの機能はないため、これらの機能を利用したいユーザーはLate Night Software社の「Script Debugger」を用いる必要がある。また、Cocoaオブジェクトのログ表示やAppleScript Librariesに添付するAppleScript用語辞書の編集についても「Script Debugger」で行える。
その一方で、AppleScriptへのコードサインはApple純正のスクリプトエディタ上でしか行うことができない。
その他、テキストで書いたスクリプトをコマンドラインからosascriptコマンドでコンパイル・実行することも可能である。
アップル純正の統合開発環境Xcode（旧Project Builder）上でAppleScriptによるアプリケーション開発を行うこともできる。AppleScriptから直接Cocoaの機能を呼び出せる「AppleScriptObjC」が提供されている（Mac OS X v10.1〜v10.5ではAppleScript Studio）。ユーザーインタフェース作成についてInterface Builderを用いる点は以前のAppleScript Studio（Mac OS X v10.6で廃止）とかわりないが、AppleScript用語辞書を用いて各種GUI部品にアクセスするのではなく、Interface Builder上でバインディングによりAppleScriptプログラム中のプロパティ値にひもづけしたり、Cocoaの各種フレームワーク内のメソッドを呼び出す方式に変更された。
AppleScript書類のフォーマットは維持されているため、基本的には互換性が確保されている。これまでMac OS X v10.4のインテルCPUへの移行や、Mac OS X v10.7の64ビットへの移行などのOSの基盤の大変革期があったが、AppleScriptそのものについてはほぼ影響はなかった。AppleScriptの処理系そのものの変更が小刻みであったため、15年前に作られたソートルーチンがそのまま使えたりもする。
ただし、AppleScriptだけでなくOSAXや外部のアプリケーションの機能を利用していた場合には、部品ごとに確認が必要となる。
まず、macOS標準添付のアプリケーションの機能がOSバージョンごとに異なる。これらを呼び出す処理を行っている場合にはチェックが必要である。とくに、AppleScriptにOSの機能を提供するために用意されている補助アプリケーションはOSバージョンによって変更されることがあるため、その存在および代替機能を確認する必要がある。一般的に、古いバージョンから新バージョンへの移行は、それなりに手間はかかるものの確認作業レベルで済む。
逆に、新しいバージョンのOSから古いバージョンのOSにScriptを移植する場合には大幅に作業量が増える。古いOSには固有のバグもあるため（Mac OS X v10.5以前は日本語のパスの扱いに問題があった）、それらを考慮した処理に変更する必要も生じる。古いmacOSが動作する実機と関連アプリケーションを用意し、きちんと動作検証や書き換え作業が必要になる。
GUI Scriptingを利用している場合には、メニュー構成やボタンの文字を変えただけで動かなくなる可能性があるため、そもそも異なるOSバージョン間でそのまま動く可能性は低い（ただし単純な修正で対応できる）。
OS X v10.10以降ではAppleScript側が想定するAppleScript処理系のバージョン（= macOSそのもののバージョン）をuseコマンドを使って表記できるようになった。「use AppleScript version "2.4"」だとOS X v10.10を、「use AppleScript version "2.5"」だとOS X v10.11およびmacOS v10.12を、「use AppleScript version "2.7"」だとmacOS v10.13を意味する。
HyperCard用のスクリプト言語であるHyperTalkに似た、英語に近い構文が採用されており、基本的には習得しやすい。機能の異なるアプリケーションを操作するためには、それぞれアプリケーションごとに異なる命令やオブジェクト構造を知る必要があり、AppleScript対応アプリケーションのアイコンをスクリプトエディタでオープンすることで表示される「AppleScript用語辞書」を参照しつつ記述することになる。
初期は日本語表現形式を含む英語以外の言語による記述も可能だったが、Mac OS 8.5以降は英語表現形式のみが採用されている。英語表現形式の場合も変数名は | で囲むことで日本語などを使用できる。
Mac OS X v10.10でAppleScriptObjCがXcode上のみならず、スクリプトエディタ上でも利用できるようになったため、Objective-C風の表記も標準採用された。
スクリプトの例（変数「持ち物=myItem」の中身が0だったらダイアログを表示する）
英語
通常は上記のように記述するが、より英文に近い以下のようなコードも記述できる。ただし複数の処理を一行のif文に組み込むことはできないので、先ほどの構文を使用することになる。下記のコードでは比較演算子の“等価”を表す = が is に置き換えられている（is は is equal to と書くこともできる。このような同義語が数多く存在するのもAppleScriptの特徴のひとつ）。
変数名に日本語を用いた例
日本語（現在は利用できない）
Mac OS X v10.6で部分的に導入され（Xcode上のみ）、Mac OS X v10.10でスクリプトエディタでもCocoaの機能を利用するAppleScriptObjCが導入された。このため、現行のmacOS上ではどのマシンでも、どのAppleScriptランタイム環境上でもCocoaの機能を利用できる状態になっている。
AppleScriptObjCは従来のAppleScriptと比べて10倍以上の高速処理が可能である。ただし、それはCocoaのメソッドを呼び出した場合であり、従来型のAppleScriptをAppleScriptObjC環境で記述しても速度は変わらない。
また、AppleScriptObjCではObjective-CのBlocks構文やprotocolをサポートしていないため、Cocoaのフレームワークすべてが利用できるわけではない。Cocoaのクラス名やメソッド名でAppleScriptの予約語とコンフリクトするものについては「|」で囲う必要がある（例：NSURL、URL、document、count、propertiesなど）。ドットシンタックスもサポートしていないため、現行のObjective-C 2.0にくらべるとやや冗長な表記になる。
Cocoaオブジェクトの結果表示やログ表示については、macOS標準添付のスクリプトエディタではサポートしていない。Cocoaオブジェクトのログ表示などを利用するためにはサードパーティーの開発ツール「Script Debugger」の利用が必要である。
スクリプトの例（変数「aString」のアルファベット大文字を小文字に変換する）
"Objective-C"
"AppleScriptObjC"
AppleScript対応アプリケーションへのtellブロック内でAppleScriptObjCの命令を呼び出すとエラーになる。このため、たとえばAdobe InDesignの書類から得られたデータをAppleScriptObjCを用いて高速にソートしたい場合などは、AppleScriptObjCの機能部分をサブルーチンとして分離し、InDesignへの命令ブロックと明示的に分ける必要がある。
なお、AppleScriptObjCで実行されるCocoa機能呼び出しはARC環境下で実行されるため、releaseなどのメソッドを呼び出すと実行環境ごとクラッシュする。
アプリケーションの操作による作業の自動化や、複数のアプリケーションの操作によるソフトウェア・ロボットの構築が可能であるが、操作対象の種類によって利用する技術や手法が変わる。
Safariやコンタクト、カレンダーなどのmacOS標準添付アプリケーションの多くがAppleScriptからのコントロールに対応しており、主要機能にアクセスできる。
ただし、対応アプリケーションであっても機能のすべてがAppleScriptに解放されているわけではない。AppleScript用語辞書に定義されている範囲のみである。
そのため、前述のGUI Scriptingによるメニューやボタンなどの強制操作が時と場合によって必要になる。この強制操作機能はOSのデフォルト設定ではオフになっているほか、アプリケーション/アプレット/Scriptごとに許可/禁止するようになっている。
do shell scriptコマンドでBSD (UNIX) レイヤー上のコマンドを呼び出すことができる。ただし、Terminal.app上とdo shell scriptコマンドでは設定されている環境変数が異なるため、Terminal.app上で実行できていた処理ができなくなる場合がある。特に、指定したコマンドにパスが通っていないことや、カレントディレクトリが異なること等はエラーの原因となる。これは環境変数の内容を明示的に指定することや、利用コマンドをフルパスで表記することで回避できる（環境変数内容はenvコマンドを実行して確認できる）。
macOS標準装備の「リモートApple events」の機構を用いて、TCP/IPネットワーク（主にLAN）内の他のMac上のアプリケーションをコントロールできるようになっている。ただし、セキュリティ確保のためmacOS標準装備のアプリケーションの多くは、この機能が禁止されているほか、OSのデフォルト設定ではリモートApple eventsはオフになっている。
1台のMacでは処理が追いつかない場合、この機構を用いて複数台のMacに仕事を割り振り分散処理を行うことができる。また、Mac上で稼働する仮想環境上でmacOSを動作させ、仮想環境との間での分散処理も可能である。
SOAP、XML-RPCを呼び出すための命令が標準で装備されている（call soap、call xmlrpc）。Cocoaの機能を用いてRESTful APIを呼び出すことも可能である。
これらのサービスが存在しないサイトに対しても、SafariをGUI Scriptingで強制的に操作することで、Webサービスにログインして必要な情報を取得するなどの処理が可能である。
iOS上でAppleScriptが動くわけでも、iOSのアプリケーションを直接コントロールできるわけでもないが、iCloudを経由して間接的にデータの変更を行える。たとえば、macOS上のリマインダーを更新するとiOS上のリマインダーも更新される。これを利用して、iOS側に大量のデータを登録したい場合にMac上でAppleScriptなどによってデータを追加するといった方法が可能である。また、iPhoneとひもづけされたMacからAppleScriptを用いて電話をかけたりSMSメッセージを送信したりもできる。
Mac OS X v10.10以降では、Objective-Cで開発されたサードパーティー製フレームワークをAppleScriptから直接呼び出すことが可能となっている。また、コンタクト（住所録）やカレンダーの情報をフレームワーク経由で検索・操作できるようになった。iTunes Libraryの検索もiTunes.app経由やiTunes Music Library.xmlを検索するよりも高速に行える。
Mac OS X v10.9以降で、AppleScript自体をライブラリ化して再利用できるようになった。さらに、このライブラリにはAppleScript用語辞書を持たせることが可能なため、AppleScriptの命令語をライブラリによって拡張することが可能である。
AppleScriptは中間コードに翻訳されて逐次実行されるが、以下のようなさまざまな保存・実行環境（ランタイム環境）を持つため、実行環境によって動作が微妙に異なり、想定していた通りに動かない場合がある。
また、実行中のログ表示が行えるのはスクリプトエディタでオープンしてスクリプトエディタで実行させた場合、およびXcode上で作成してデバッグビルドを行なっている場合の２つのケースにかぎられる。フォルダアクションで実行中のAppleScript書類をスクリプトエディタでオープンさせたからといって、フォルダアクションで実行中のAppleScriptのログがスクリプトエディタ上にログ表示されることはない。
スクリプトエディタ上に記述して、スクリプトエディタ上で実行する形態である。この際の実行環境はスクリプトエディタであり、途中でAppleScriptの実行を停止させたり、ログ表示させた内容を確認したりできる（ログ表示させると実行速度がいちじるしく低下する）。
スクリプトエディタ上で記述して、アプリケーションとして保存、あるいはアプリケーションとして書き出したものである。この形態のものをアプレットと呼ぶ。アプレット実行時にはアプレット用のランタイム環境が用意されている。この環境で実行すると、on idleによるタイマー割り込み、ファイルやフォルダをドラッグ＆ドロップ受信する機能、ハンドラの実行後に終了しない、プログレスバーの表示機能（Mac OS X v10.10より）などの機能が利用できる。ファイル/フォルダのドラッグ＆ドロップを受け付けるアプレットをドロップレットと呼んで区別する（アイコンが異なる）が、ランタイム環境は同じである。
アプレット実行時にログ表示などの機能は利用できないため、この実行形態のままではバグの確認や修正が困難である。アプレットとして書き出す前にスクリプトエディタ上で内容に問題がないことを確認する必要がある。
Automatorのワークフロー記述の一部としてAppleScriptを使用することもできる。Automator上のアクション「AppleScriptを実行」がスクリプトエディタに近い機能（ログ表示、結果表示）を持つが、他のAppleScript対応アプリケーションのAppleScript用語辞書をブラウズしたり、途中で実行を停止させるなどの機能はない。
Mac OS X v10.7で導入された。スクリプトエディタ上で「ファイル」＞「テンプレートから新規作成」＞「Cocoa-AppleScript Applet」を選択することで新規作成できる。AppleScriptObjCによるプログラムをスクリプトエディタ上で記述できるが、ユーザーインタフェースの作成が行えず、デバッグ機能も乏しい。
Xcode上で「File」＞「Project」＞「Other」＞「AppleScript App」を呼び出すと作成される。一般的なCocoaアプリケーションをAppleScriptで開発する環境である。一般的なCocoaアプリケーションに近いものが作れるが、一般的なCocoaアプリケーションを作成するための知識が必要とされる。Xcode内蔵のエディタ上で編集するAppleScriptは、文法要素に応じた構文色分け機能が利用できず、デバッグも行いにくい。複数のスクリプトファイルにプログラムを分割した場合のハンドラ呼び出し方法にクセがある。
macOSのメニューバーから所定のフォルダ内のAppleScriptを実行できる、macOS標準装備の「スクリプトメニュー」に登録・実行した場合の実行環境も、OSのバージョンに応じてさまざまな変更が加わってきた。Mac OS X v10.10からはosascriptコマンドで実行する実装になった。このため、スクリプトメニューから複数のAppleScriptを同時に実行させることが可能になったが、実行するScript同士で共通のアプリケーションにアクセスした場合のバッティングまでは面倒を見てくれない。スクリプトメニューから実行中のScriptの停止を行えるが、実行中のログ表示はできない。
指定のフォルダ内容を数秒間隔で監視し、変更が加わるとAppleScriptの実行を行う機構である。ランタイムの差異が問題を生むというよりも、このフォルダアクションの機構そのものがmacOSのバージョンによってはうまく動作していない（Mac OS X v10.10）ことが問題である。
OSバージョンによっては、display dialogなどのコマンドが利用できなかったが、Mac OS X v10.10以降はスクリプトエディタ上での実行にきわめて近いランタイム環境が提供されている。全く同一ではないため、スクリプトエディタ上で記述すれば発生しないような問題に直面する場合がある。
FileMaker Proを外部からAppleScriptでコントロールするよりも、FileMaker Proスクリプトの「AppleScriptを実行」スクリプトステップ中にAppleScriptをコピー＆ペーストで入れて実行する方が数倍高速に実行される。画面の再描画などを抑止するほか、高速実行するための仕組みを備えている。
Microsoft OfficeのVBAスクリプト内でも、AppleScriptを呼び出す仕組みが用意されている。Excel v.14.xまでは「MacScript」コマンドにより文字列で与えたAppleScriptが、Excel v.15.xでは「AppleScriptTask」コマンドによりファイル名を指定して外部のAppleScriptを実行できるようになっている。
同様に、Adobe InDesignの「スクリプト」パレット中からAppleScriptを呼び出すことが出来、この際に画面の再描画を抑止できるため高速実行（おおよそ2倍）が可能となっている。ただし、Adobe InDesignについては大量のデータ処理時にクラッシュが発生するため、処理速度より安定稼働を重視すると外部からのコントロールも選択肢に入る。
AppleScript専用のサードパーティー統合開発環境といえるScript Debuggerでは、デバッグ時にAppleScript互換の「AppleScript Debugger 5」というAppleScriptとは別のOSA言語を実行することになる（数字の部分はScript Debuggerのバージョンによって異なる）。厳密にいえばAppleScriptそのものを実行するわけではないため、振る舞いが異なる箇所が出てくることは否定できない。ただし、以前（Classic Mac OS時代）に比べると純正AppleScript環境との互換性は大幅に高まっている。強力で便利な環境であるが、「デバッグ時以外はScript Debuggerを使うべきではない」という方針の開発現場もあるのは、この「互換性問題」ゆえである。
スクリプトエディタ上でのコンパイル（実質的には構文チェック＋中間コードへの置き換え）時には、AppleScriptの基本的な文法を外れなければ、それがたとえ実行できない命令の組み合わせであってもエラーにならない。実行時にエラーとなる。FinderのAppleScript用語辞書を見ていると「make new application」といったできそうもないプログラムを組めそうに見え、実際にFinderへのtellブロック内に記述するとコンパイルを通ってしまう。
実際には、アプリケーション側が想定している命令語の組み合わせは限定されたものである。また、想定された条件下によっては実行できるが、条件がそろわないと実行してもエラーになったり無意味な結果になるものもある。このため、アプリケーションが備えている機能を逸脱しない表記、アプリケーションの用語辞書で実現可能な記述パターンの情報を収集することには大いに意義がある（Appleが主催するメーリングリストのアーカイブの検索がこれに適している）。また、Scriptはこまめに実行して想定どおりの実行結果が得られているかを確認するとよい。
たとえば、printコマンドでプリンタを指定して書類を印刷する機能が存在していても、LAN内に存在するプリンタ名一覧を取得する機能はデフォルトでは用意されていない。同様に、テキストの音声読み上げを行うsayコマンドで音声キャラクタの名称を指定できるのに、現在システムにインストールされている音声名称の一覧を取得する機能が存在していない。このため、shell scriptやCocoaのサービスを呼び出して、取得する手段を別途用意する必要がある。
何らかの条件に基づいてオブジェクトを抽出する処理が、アプリケーションコントロールでは日常的に発生する。たとえば、リマインダーで名称（name）に「発売日」を含む項目のみ抽出するといった処理である。そのような場合に、オブジェクトの抽出をせずに「とりあえずすべてのオブジェクトを取得して、ループで条件一致するものを抽出する」ようなコードでは処理が遅くなってしまう。フィルタ参照を使って対象オブジェクトのしぼりこみを行うと速度を向上できる。
何らかのオブジェクトの属性値を取得したい場合に、複数の属性値を何回かに分けて取得するよりもpropertiesでまとめて属性を取得した方が速いケースなどがある。アプリケーションをコントロールするために存在しているAppleScriptであるが、アプリケーションとの通信回数を減らすことが処理の高速化につながる。
例えば、指定フォルダ以下の全てのファイルを処理する場合、Classic Mac OS時代にはFinderに対して再帰処理で取得するように書いていたが、現代のmacOSではSpotlightを用いてファイル一覧を取得するとずっと速く処理できる。このように、macOSの機能の移り変わりを意識していないと処理速度が大幅に変わる。
iTunes、Keynote、Pages、Numbersなどアップル純正アプリケーションに固有の問題が存在する。アプリケーションのローカライズをやりすぎて、AppleScript関連の機能までローカライズされてしまうことが多々ある。このため、海外で流布しているAppleScriptの、主にオブジェクト名称を英語名表記から日本語名表記に変更しないと日本語環境上では実行できない（エラーになる）ケースが存在する。
あまりに拡張され、できることが増えすぎたため、AppleScriptの一部機能を抑止するための機構がmacOSに用意されつつある。以下の機能についてはデフォルトでは禁止状態になっているが、管理者パスワードを入力すれば実行を許可するようになっている。
ネットワーク上の他のMacからのコントロールを行うリモートApple Eventsに対し、macOS標準装備の各アプリケーションは応答しないようになっている。また、出荷時のデフォルト設定で、リモートApple Eventsはオフになっている。
画面上のメニューやボタンなどを操作するGUI Scriptingについては、「システム環境設定」の「セキュリティとプライバシー」＞「アクセシビリティ」で個別に許可を行うようになっている。デフォルト設定では、どのプログラムに対しても許可していない。
Safari 9.1.1より、「開発」メニューに「Apple EventsからのJavaScriptを許可」の項目が新設され、これにチェックを入れないとAppleScriptからSafariに対してdo javascript命令を実行できなくなった。いったん許可すれば、その状態は継続される。
FileMaker Pro v16より、FileMaker Script中におけるAppleScriptの実行（正確にいえば、AppleScriptからFileMaker Pro自身を操作すること）がデフォルトの権限セットのままでは許可されない状態になっている。そのため、より以前のバージョンで作成したFileMaker ProデータベースをFileMaker Pro v16でオープンすると、FileMaker Script Step実行時に「実行権限エラー」ダイアログが表示され、Script Stepの実行が行われないという現象に直面することがある。このような場合には、拡張アクセス権で「Apple EventおよびActive-XによるFileMaker操作の実行を許可」にチェックを入れれば実行できるようになる。
macOS側のセキュリティ機能とAppleScriptの処理系のすり合わせが不十分なままOSがリリースされてしまったために、macOS 10.12, SierraにおいてはAppleScriptをドロップレットとして保存し、ファイルをドラッグ＆ドロップした場合には、ファイルの処理が行われなかったりファイル処理の順序が以前のOSのとおりに行われなかったりする。
これは、ファイルの拡張属性（Xattr）の１つ「com.apple.quarantine」により発生する。インターネット上からダウンロードしたファイルなどは、その安全性が担保されていない状態であると（macOSが）みなし、この「com.apple.quarantine」属性が添付される。
ユーザーの操作によりファイルのオープンを許可された（「ダウンロードされたファイルですが、オープンしてもよいですか？」という確認ダイアログでユーザーに承認）場合には処理されるが、同属性がついたままだとドロップレットによる処理が行われない。一応回避手段は存在するが、初心者には理解が難しいものとなっている。
sayコマンドで日本語読み上げ音声を指定して「もげる」「捥げる」を読み上げると正常に読み上げられない（NSSpeechManagerのバグで、SwiftやObjective-Cでも同様のバグが発生し、iOSでも状況は同じ）。。
Enum「NSNotFound」の定義が間違っており、-1ではない値を返す（10.13.1にて修正）。
AppleScriptからCocoaの機能を呼び出す際にScripting Bridgeの仕組みが利用されているが、このScripting Bridgeの定義ファイルに問題があり、いくつかの機能が正常に呼び出せない状況が確認されている。。
NSRectが属性ラベルつきのレコード型ではなくリスト型に変換されるようになっている。
PDFViewに対してcurrentPage()を実行してもPDFPageが返ってこない。このため、PDFView上でPDFを表示させるGUIプログラムに影響が出ている。
→サポートページ
→サポートページ
→サポートページ
→サポートページ
→サポートページ
→サポートページ
