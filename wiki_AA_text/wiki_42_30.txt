Bit Block Transfer
ビットブロック転送（、ビット・ブロック・トランスファー）は、コンピュータグラフィックスにおける画像データ（ビットマップ）操作およびそれに関連するハードウェア機能のひとつである。ビットブロック転送の操作には少なくとも2つのビットマップを必要とし、転送の際にビット単位の論理演算（ラスターオペレーション）を伴うこともある。
BitBlt (読みは「ビットブリット」) と略されるが、これをデバイスドライバやゲームの設定ファイルなどでBitBit（lではなくてi）と表現してしまう間違いも。また、BitBlit（lの後にiを挿入）と間違っている。
CPUからVRAMに対する直接アクセスはCRTCからのアクセスの干渉などハードウェア的な制約が多いため、メインメモリに対するアクセスよりも低速であることが多い。、画像操作の度にVRAMにアクセスを行うことは描画速度を低下させるばかりか、描画途中で画面のフレームが切り替わってしまう状況を生じやすく、ちらつき（フリッカー）、、カクつき（スタッタリング）を発生させる原因となる。これらの問題の解決方法の一つとして、モニターに表示するための表画面となる画像データ領域をVRAMに、そして裏画面となる同サイズのデータ領域をメインメモリに確保しておき、画像操作は裏画面にて行ない、最終的に裏画面のデータを表画面に一括転送するというダブルバッファリング手法がある。この転送時にビットブロック転送が利用される。Windows API（GDI）におけるBitBlt関数のように、グラフィックスデバイス（グラフィックスチップ、GPU）によるハードウェアアクセラレーション機能を備えるものもある。CPUの代わりにDMAコントローラを用いてメインメモリからVRAMにビットマップを転送するアーキテクチャも存在する。Macintoshでは「オフスクリーン描画」と呼ぶのが普通で、"Bit Block Transfer"や"BitBlt"という語句はめったに出てこない。
ダブルバッファリングの裏画面用に確保したメモリ領域はオフスクリーン、オフスクリーンバッファあるいはバックバッファと呼ぶ。またわかりやすく仮想画面と呼ぶこともある。
Direct3DやOpenGLなどのグラフィックスハードウェアアクセラレーションに対応したAPIを利用してGPU上で画像処理を行なう場合は、メインメモリを介することなくVRAM上で直接画像データを高速に操作できるが、表画面に対する直接操作は依然としてちらつきの問題を生じるため、VRAM上に裏画面を用意しておき、フリップ（スワップ）機能を用いてダブルバッファリングを行なうのが通例である。同様に、メインメモリの一部をVRAMとしてGPUと共用するオンボードグラフィックスなどの環境であっても、ダブルバッファリングが必要である。
当初は、PARCで開発されたAlto向けに開発されたSmalltalkシステムで、ポップアップするメニューやオーバーラップするウインドウを有するGUIの効率化を図るためにダン・インガルスらにより考案・実装されたものだが、後にマイクロコード化され、Altoの組み込みの機能としてSmalltalk以外のGUIシステムでも広く利用されるようになった。Smalltalkシステムでは、GUIウィジェットの通常描画の他にも、タートルグラフィックス、フォントの複数のスタイル（ボールド、イタリック、アンダーライン、取り消し線）の自動生成、あるいは、描画ツールでドット単位の部分編集を可能にする拡大表示、図形の回転処理などを行なう際などに活用された。なお、1979年時点でのSmalltalkでは隠れたウインドウの見える部分だけの描画更新処理は行なっていなかったのだが、おそらく前述マイクロコード化などのハードウェア支援も手伝って比較的に高速にウインドウ処理をこなすSmalltalkシステムのデモを見たビル・アトキンソンが思い込みで、不定形領域を対象にでき、しかもソフトウェアのみで部分的な再描画を行なっているものと誤解。その認識のまま、後にアップル製LisaやMacintoshでGUI描画の中核を担う、“リージョン”の扱いと比較的高速な描画が可能なQuickDrawとして、ついに完成させてしまったという逸話がある。
